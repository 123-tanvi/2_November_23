# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def averageOfSubtree(self, root: Optional[TreeNode]) -> int:
        res = 0
        def dfs(node):
            nonlocal res
            if not node:
                return 0, 0 
            left_sum, left_count = dfs(node.left)
            right_sum, right_count = dfs(node.right)
            curr_sum = node.val + left_sum + right_sum
            total_len = 1 + left_count + right_count
            if curr_sum // total_len == node.val:
                res += 1
            return curr_sum, total_len
        dfs(root)
        return res
            
        
